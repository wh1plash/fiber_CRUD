stages:
  - test
  - build
  - package
  - deploy

variables:
  IMAGE_NAME: whiplash2486/fiber_crud
  IMAGE_TAG: 1.1

test:
  stage: test
  image: golang:1.24
  services:
    - name: postgres:15
      alias: postgres
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: test
  before_script:
    - apt-get update && apt-get install -y postgresql-client
    - until pg_isready -h postgres -U $POSTGRES_USER; do sleep 1; done
  script:
    - go mod download
    - make test
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
    - if: '$CI_COMMIT_BRANCH == "main"'

build:
  stage: build
  before_script:
    - mkdir ./bin
    - echo "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker create --name tmp $IMAGE_NAME:$IMAGE_TAG
    - docker cp tmp:/app/bin/app ./bin/app
    - docker rm tmp
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
    - if: '$CI_COMMIT_BRANCH == "main"'
  artifacts:
    paths:
      - ./bin/app

# build_slim:
#   stage: package
#   dependencies:
#     - build
#   script:
#     - echo "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin
#     - |
#       cat <<EOF > Dockerfile
#       FROM golang:1.24.3
#       WORKDIR /app
#       COPY bin/app ./bin/app
#       EXPOSE 3000
#       CMD ["./bin/app"]
#       EOF

#     - docker build -t $IMAGE_NAME:$IMAGE_TAG-slim .
#     - docker push $IMAGE_NAME:$IMAGE_TAG-slim

deploy:
  stage: deploy
  before_script:
    - cp "$ENV_FILE" .env
  script:
    - echo "Stopping and removing containers for project $CI_PROJECT_NAME..."
    # - docker ps -a
    # - docker ps -aq --filter "name=${COMPOSE_PROJECT_NAME}" | xargs -r docker rm -f
    - echo "Removing Docker image $CI_PROJECT_NAME..."
    - docker rmi -f $REGISTRY_USER/$CI_PROJECT_NAME:1.1-slim || true
    - docker compose up -d # Ensures fresh start
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
    - if: '$CI_COMMIT_BRANCH == "main"'
  # artifacts:
  #   paths:
  #     - ./metrics/prometheus.yml  # Makes it available for later jobs