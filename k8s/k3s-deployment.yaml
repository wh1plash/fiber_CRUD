# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: fiber-crud

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: fiber-crud
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "Fiber_CRUD"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -d Fiber_CRUD
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -d Fiber_CRUD
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: fiber-crud
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres_db
  namespace: fiber-crud
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Prometheus Deployment (using custom build)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: fiber-crud
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: whiplash2486/prometheus-custom:latest  # You'll need to build and tag this from ./metrics/Dockerfile
        ports:
        - containerPort: 9090
        # Add volume mounts if your custom Prometheus needs config files
        # volumeMounts:
        # - name: prometheus-config
        #   mountPath: /etc/prometheus
      # volumes:
      # - name: prometheus-config
      #   configMap:
      #     name: prometheus-config
      restartPolicy: Always

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: fiber-crud
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: fiber-crud
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana-enterprise
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-pvc

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: fiber-crud
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: fiber-crud
spec:
  selector:
    app: grafana
  ports:
  - port: 3001
    targetPort: 3000
  type: ClusterIP

---
# Fiber CRUD App Deployment (3 replicas)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fiber-crud-app
  namespace: fiber-crud
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fiber-crud-app
  template:
    metadata:
      labels:
        app: fiber-crud-app
    spec:
      containers:
      - name: fiber-crud-app
        image: whiplash2486/fiber_crud:1.1-slim
        ports:
        - containerPort: 3000
        env:
        - name: DB_HOST
          value: "postgres-db"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "postgres"
        - name: DB_NAME
          value: "Fiber_CRUD"
      # Add init container to wait for postgres (similar to depends_on with healthcheck)
      initContainers:
      - name: wait-for-postgres
        image: postgres:15
        command:
        - /bin/sh
        - -c
        - |
          until pg_isready -h postgres-db -p 5432 -U postgres -d Fiber_CRUD; do
            echo "Waiting for postgres..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

---
# Fiber CRUD App Service
apiVersion: v1
kind: Service
metadata:
  name: fiber-crud-service
  namespace: fiber-crud
spec:
  selector:
    app: fiber-crud-app
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fiber-crud-ingress
  namespace: fiber-crud
  annotations:
    kubernetes.io/ingress.class: "traefik"
spec:
  rules:
  - host: fiber-crud.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fiber-crud-service
            port:
              number: 3000
  - host: grafana.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3001
  - host: prometheus.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090

---
# NodePort Services for direct access (alternative to ingress)
apiVersion: v1
kind: Service
metadata:
  name: fiber-crud-nodeport
  namespace: fiber-crud
spec:
  type: NodePort
  selector:
    app: fiber-crud-app
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30000

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-nodeport
  namespace: fiber-crud
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
  - port: 3001
    targetPort: 3000
    nodePort: 30001

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-nodeport
  namespace: fiber-crud
spec:
  type: NodePort
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-nodeport
  namespace: fiber-crud
spec:
  type: NodePort
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    nodePort: 30432